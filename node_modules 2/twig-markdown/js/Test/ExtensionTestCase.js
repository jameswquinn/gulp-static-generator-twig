"use strict";
var Extension_1 = require('../Extension');
var twig = require('twig');
require('should');
suite('twig markdown', function () {
    twig.extend(Extension_1.extend);
    test('compile markdown with a relative path to the current working directory', function () {
        var template = twig.twig({ data: "{% markdown './test/markdown.md' %}NOT FOUND!{% endmarkdown %}" });
        template.render().should.equal('<h1 id="foo">foo</h1>\n<p>bar</p>\n');
    });
    test('error if markdown is not found at the given path', function () {
        var source = "{% markdown 'null.md' %}{% endmarkdown %}";
        (function () {
            twig.twig({ data: source, rethrow: true, trace: false }).render();
        }).should.throw();
    });
    test('compile markdown in the block', function () {
        var template = twig.twig({ data: "{% markdown %}# Foo{% endmarkdown %}" });
        template.render().should.equal('<h1 id="foo">Foo</h1>\n');
    });
});
suite('unindent', function () {
    test('unindent non-indented line', function () {
        Extension_1.unindent('foo\n  bar').should.equal('foo\n  bar');
    });
    test('unindent line with simple indentation', function () {
        Extension_1.unindent('  foo\n  bar\n  baz').should.equal('foo\nbar\nbaz');
    });
    test('unindent line with complex indentation', function () {
        Extension_1.unindent('  foo\n  bar\nbaz').should.equal('  foo\n  bar\nbaz');
    });
    test('unindent line with even more complex indentation', function () {
        Extension_1.unindent('    foo\n  bar\n baz').should.equal('   foo\n bar\nbaz');
    });
});
