"use strict";
var twig_1 = require('twig');
var fs = require('fs');
var marked = require('marked');
var path = require('path');
var pathJoin = path.join;
var pathIsAbsolute = path.isAbsolute;
function unindent(string) {
    var regexp = /^\s+/;
    var match;
    if ((match = string.match(regexp)) == null) {
        return string;
    }
    var lines = string.split(/\n/);
    var indentation = null;
    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
        var line = lines_1[_i];
        if (line === '') {
            continue;
        }
        else if ((match = line.match(regexp)) == null) {
            return string;
        }
        else if (indentation == null || indentation.length > match[0].length) {
            indentation = match[0];
        }
    }
    return string.replace(new RegExp('^' + indentation), '').replace(new RegExp('\n' + indentation, 'g'), '\n');
}
exports.unindent = unindent;
function extend(core) {
    var Twig = core;
    var markdownToken = {
        type: 'markdown',
        regex: /^markdown(?:\s+(.+))?$/,
        next: ['endmarkdown'],
        open: true,
        compile: function (token) {
            var compiledToken = token;
            var match = token.match;
            delete token.match;
            compiledToken.stack = match[1] == null ? [] : Twig.expression.compile.apply(this, [{
                    type: Twig.expression.type.expression,
                    value: match[1]
                }]).stack;
            return compiledToken;
        },
        parse: function (token, context, chain) {
            var path = token.stack.length > 0 ? Twig.expression.parse.apply(this, [token.stack, context]) : null;
            var markdown;
            var file = context == null ? null : context['_file'];
            if (path != null && !pathIsAbsolute(path)) {
                path = pathJoin(file != null && file.base != null ? file.base : process.cwd(), path);
            }
            try {
                markdown = path == null
                    ? unindent(Twig.parse.apply(this, [token.output, context]))
                    : fs.readFileSync(path, 'utf8');
            }
            catch (error) {
                throw new twig_1.Core.Error('Markdown file `' + path + '` could not be found.');
            }
            finally {
                markdown === '' && (markdown = null);
            }
            return {
                chain: chain,
                output: markdown == null ? '' : marked(markdown)
            };
        }
    };
    var endmarkdownToken = {
        type: 'endmarkdown',
        regex: /^endmarkdown$/,
        next: [],
        open: false
    };
    Twig.logic.extend(markdownToken);
    Twig.logic.extend(endmarkdownToken);
}
exports.extend = extend;
